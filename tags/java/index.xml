<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on 壹零壹玖</title>
    <link>https://1019.fun/tags/java/</link>
    <description>Recent content in java on 壹零壹玖</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://1019.fun/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mybatis自定义结果映射规则</title>
      <link>https://1019.fun/posts/mybatis%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%9C%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/mybatis%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%9C%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/</guid>
      <description>问题 在实际业务处理规则中，数据库的列名和对象的属性名不一致如何处理呢？
解决方式 1.通过开启Mybatis配置文件开启自动驼峰命名规则 适用于满足A_COLUNM/aColumn的对应规则的
&amp;lt;setting name=&amp;#34;mapUnderscoreToCamelCase&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; 2.自定义结果映射规则 针对不能满足A_COLUNM/aColumn的对应规则的
(1)普通自定义结果映射 &amp;lt;resultMap id=&amp;#34;resultMap&amp;#34; type=&amp;#34;com.study.mybatis.pojo.Student&amp;#34;&amp;gt; &amp;lt;result column=&amp;#34;student_name&amp;#34; property=&amp;#34;studentName&amp;#34;/&amp;gt; &amp;lt;result column=&amp;#34;age&amp;#34; property=&amp;#34;age&amp;#34;/&amp;gt; &amp;lt;result column=&amp;#34;gender&amp;#34; property=&amp;#34;gender&amp;#34;/&amp;gt; &amp;lt;/resultMap&amp;gt; (2)自定义级联结果映射 适用于查询结果包含多个对象级联的情况
方式1：通过 &amp;lsquo;.&amp;rsquo; &amp;lt;resultMap id=&amp;#34;resultMap1&amp;#34; type=&amp;#34;com.study.mybatis.pojo.Person&amp;#34;&amp;gt; &amp;lt;result column=&amp;#34;name&amp;#34; property=&amp;#34;name&amp;#34;/&amp;gt; &amp;lt;result column=&amp;#34;age&amp;#34; property=&amp;#34;age&amp;#34;/&amp;gt; &amp;lt;result column=&amp;#34;car_brand&amp;#34; property=&amp;#34;car.brand&amp;#34;/&amp;gt; &amp;lt;result column=&amp;#34;car_price&amp;#34; property=&amp;#34;car.price&amp;#34;/&amp;gt; &amp;lt;/resultMap&amp;gt; 方式2：通过 &amp;lsquo;association标签&amp;rsquo; &amp;lt;resultMap id=&amp;#34;resultMap2&amp;#34; type=&amp;#34;com.study.mybatis.pojo.Person&amp;#34;&amp;gt; &amp;lt;result column=&amp;#34;name&amp;#34; property=&amp;#34;name&amp;#34;/&amp;gt; &amp;lt;result column=&amp;#34;age&amp;#34; property=&amp;#34;age&amp;#34;/&amp;gt; &amp;lt;association property=&amp;#34;car&amp;#34; javaType=&amp;#34;com.study.mybatis.pojo.Car&amp;#34;&amp;gt; &amp;lt;result column=&amp;#34;car_brand&amp;#34; property=&amp;#34;brand&amp;#34;/&amp;gt; &amp;lt;result column=&amp;#34;car_price&amp;#34; property=&amp;#34;price&amp;#34;/&amp;gt; &amp;lt;/association&amp;gt; &amp;lt;/resultMap&amp;gt; 参考 https://ke.qq.com/course/199779?taid=1162699186834531</description>
    </item>
    
    <item>
      <title>Mybatis增删改查</title>
      <link>https://1019.fun/posts/mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/mybatis%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>测试数据准备 DROP TABLE IF EXISTS `student`; CREATE TABLE `student` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT &amp;#39;&amp;#39;, `age` int(11) NOT NULL DEFAULT &amp;#39;0&amp;#39;, `gender` varchar(255) COLLATE utf8_bin NOT NULL DEFAULT &amp;#39;&amp;#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_bin; Mybatis的安装配置 1.安装（Maven直接引用） &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.x.x&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 版本:https://github.com/mybatis/mybatis-3/releases
2.配置 resource/mybatis/jdbc.properties
username=root password=root driver=com.mysql.cj.jdbc.Driver url=jdbc:mysql://localhost:3306/study resource/mybatis/mybatis-config.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.</description>
    </item>
    
    <item>
      <title>TestNG传参的几种方式</title>
      <link>https://1019.fun/posts/testng%E4%BC%A0%E5%8F%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/testng%E4%BC%A0%E5%8F%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</guid>
      <description>1.通过Xml文件传参 TestNg.java
package com.test; import org.testng.annotations.Parameters; import org.testng.annotations.Test; public class TestNG { @Parameters({&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;}) @Test public static void testNG(String a, String b) { System.out.println(a); System.out.println(b); } } testNG.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&amp;lt;!DOCTYPE suite SYSTEM &amp;#34;http://testng.org/testng-1.0.dtd&amp;#34; &amp;gt; &amp;lt;suite name=&amp;#34;test&amp;#34;&amp;gt; &amp;lt;!-- 参数配置 --&amp;gt; &amp;lt;parameter name=&amp;#34;a&amp;#34; value=&amp;#34;aaa&amp;#34;/&amp;gt; &amp;lt;parameter name=&amp;#34;b&amp;#34; value=&amp;#34;bbb&amp;#34;/&amp;gt; &amp;lt;!-- 执行测试 --&amp;gt; &amp;lt;test name=&amp;#34;test&amp;#34;&amp;gt;&amp;lt;classes&amp;gt;&amp;lt;class name=&amp;#34;com.test.TestNG&amp;#34;/&amp;gt;&amp;lt;/classes&amp;gt;&amp;lt;/test&amp;gt; &amp;lt;/suite&amp;gt; 执行结果：
aaa bbb 2.通过@DataProvider传参 package com.test; import org.testng.annotations.DataProvider; import org.testng.annotations.Test; public class TestNG { @DataProvider(name = &amp;#34;xxx&amp;#34;) public static Object[][] xxx() { return new Object[][]{ {&amp;#34;aaa&amp;#34;, &amp;#34;bbb&amp;#34;}, }; } @Test(dataProvider = &amp;#34;xxx&amp;#34;) public static void testNG(String a, String b) { System.</description>
    </item>
    
    <item>
      <title>Mybatis全局配置文件的常用配置</title>
      <link>https://1019.fun/posts/mybatis%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/mybatis%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</guid>
      <description>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE configuration PUBLIC &amp;#34;-//mybatis.org//DTD Config 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;#34;&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;!-- 引用配置文件 --&amp;gt; &amp;lt;properties resource=&amp;#34;mybatis/jdbc.properties&amp;#34;/&amp;gt; &amp;lt;!-- 设置 --&amp;gt; &amp;lt;settings&amp;gt; &amp;lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。（默认false）--&amp;gt; &amp;lt;setting name=&amp;#34;mapUnderscoreToCamelCase&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存（默认true） --&amp;gt; &amp;lt;setting name=&amp;#34;cacheEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;!-- 设置超时时间，它决定驱动等待数据库响应的秒数。(默认null) --&amp;gt; &amp;lt;setting name=&amp;#34;defaultStatementTimeout&amp;#34; value=&amp;#34;10&amp;#34;/&amp;gt; &amp;lt;!-- 懒加载： aggressiveLazyLoading 或 collection 在进行分步查询时， 若使用到级联对象的属性，则进行查询 若未使用到级联对象的属性，则不进行查询 --&amp;gt; &amp;lt;setting name=&amp;#34;lazyLoadingEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;setting name=&amp;#34;aggressiveLazyLoading&amp;#34; value=&amp;#34;false&amp;#34;/&amp;gt; &amp;lt;/settings&amp;gt; &amp;lt;!-- 别名,别名不区分大小写 --&amp;gt; &amp;lt;typeAliases&amp;gt; &amp;lt;!-- 别名: 默认 alias = 类名小写 ，也可自定义--&amp;gt; &amp;lt;typeAlias type=&amp;#34;com.</description>
    </item>
    
    <item>
      <title>AOP</title>
      <link>https://1019.fun/posts/aop/</link>
      <pubDate>Sun, 03 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/aop/</guid>
      <description>1.使用注解方式配置AOP applicationContext-aop.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xmlns:aop=&amp;#34;http://www.springframework.org/schema/aop&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&amp;#34;&amp;gt; &amp;lt;!-- 配置自动扫描的包 --&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.study.spring2.aop.impl&amp;#34;/&amp;gt; &amp;lt;!-- 使 Aspect 注解起作用：自动为匹配的类生成代理对象 --&amp;gt; &amp;lt;aop:aspectj-autoproxy/&amp;gt; &amp;lt;/beans&amp;gt; Calculator.java
package com.study.spring2.aop.impl; public interface Calculator { int add(int i, int j); int sub(int i, int j); int mul(int i, int j); int div(int i, int j); } CalculatorImpl.java
package com.study.spring2.aop.impl; import org.springframework.stereotype.Component; @Component(value = &amp;#34;calculator&amp;#34;) public class CalculatorImpl implements Calculator { @Override public int add(int i, int j) { return i + j; } @Override public int sub(int i, int j) { return i - j; } @Override public int mul(int i, int j) { return i * j; } @Override public int div(int i, int j) { return i / j; } } LoggingAspect.</description>
    </item>
    
    <item>
      <title>Mybatis动态SQL</title>
      <link>https://1019.fun/posts/mybatis%E5%8A%A8%E6%80%81sql/</link>
      <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/mybatis%E5%8A%A8%E6%80%81sql/</guid>
      <description>EmployeeMapper.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34; &amp;gt; &amp;lt;mapper namespace=&amp;#34;com.study.mybatis.dynamic.dao.EmployeeMapper&amp;#34;&amp;gt; &amp;lt;!-- if --&amp;gt; &amp;lt;select id=&amp;#34;getEmpsByConditionIf&amp;#34; resultType=&amp;#34;com.study.mybatis.dynamic.pojo.Employee&amp;#34;&amp;gt; select * from tbl_employee &amp;lt;where&amp;gt; &amp;lt;if test=&amp;#34;id!=null&amp;#34;&amp;gt; id = #{id} &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;#34;lastName != null and lastName != &amp;#39;&amp;#39;&amp;#34;&amp;gt; and last_name = #{lastName} &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;#34;email != null and email.trim() != &amp;#39;&amp;#39;&amp;#34;&amp;gt; and last_name = #{lastName} &amp;lt;/if&amp;gt; &amp;lt;if test=&amp;#34;gender == 0 or gender == 1&amp;#34;&amp;gt; and gender = #{gender} &amp;lt;/if&amp;gt; &amp;lt;/where&amp;gt; &amp;lt;/select&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>spring的xml配置</title>
      <link>https://1019.fun/posts/spring%E7%9A%84xml%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/spring%E7%9A%84xml%E9%85%8D%E7%BD%AE/</guid>
      <description>创建一个Bean applictionContext.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;helloWorld&amp;#34; class=&amp;#34;com.study.spring.pojo.HelloWorld&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;name&amp;#34; value=&amp;#34;china-spring&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; Bean熟悉值包含特殊字符的处理方式 applictionContext.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;car1&amp;#34; class=&amp;#34;com.study.spring.pojo.Car&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;brand&amp;#34; value=&amp;#34;BMW&amp;#34;/&amp;gt; &amp;lt;!-- 如果字面包含特殊字符可以使用 &amp;lt;![CDATA[]]&amp;gt; 包裹--&amp;gt; &amp;lt;!-- 属性值也可以通过 value 子节点进行配置--&amp;gt; &amp;lt;constructor-arg name=&amp;#34;city&amp;#34;&amp;gt;&amp;lt;value&amp;gt;&amp;lt;![CDATA[&amp;lt;Beijing&amp;#39;&amp;gt;]]&amp;gt;&amp;lt;/value&amp;gt;&amp;lt;/constructor-arg&amp;gt; &amp;lt;constructor-arg name=&amp;#34;price&amp;#34; value=&amp;#34;1000000&amp;#34;/&amp;gt; &amp;lt;constructor-arg name=&amp;#34;maxSpeed&amp;#34; value=&amp;#34;300&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; Bean引用 applictionContext.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;car1&amp;#34; class=&amp;#34;com.study.spring.pojo.Car&amp;#34;&amp;gt; &amp;lt;constructor-arg name=&amp;#34;brand&amp;#34; value=&amp;#34;BMW&amp;#34;/&amp;gt; &amp;lt;constructor-arg name=&amp;#34;city&amp;#34; value=&amp;#34;Shanghai&amp;#34;/&amp;gt; &amp;lt;constructor-arg name=&amp;#34;price&amp;#34; value=&amp;#34;1000000&amp;#34;/&amp;gt; &amp;lt;constructor-arg name=&amp;#34;maxSpeed&amp;#34; value=&amp;#34;300&amp;#34;/&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;person&amp;#34; class=&amp;#34;com.</description>
    </item>
    
    <item>
      <title>TestNG@Test注解配置</title>
      <link>https://1019.fun/posts/testngtest%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/testngtest%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE/</guid>
      <description>alwaysRun If set to true, this test method will always be run even if it depends on a method that failed.
/** * 默认: false * 设置为 true ，则次方法依赖的方法失败，该方法也会运行。 */ @Test(alwaysRun = true) dataProvider The name of the data provider for this test method.
/** * 设置该方法的执行参数 */ @DataProvider(name = &amp;#34;xxx&amp;#34;) public static Object[][] xxx() { return new Object[][]{ {&amp;#34;aaa&amp;#34;, &amp;#34;bbb&amp;#34;}, }; } @Test(dataProvider = &amp;#34;xxx&amp;#34;) dataProviderClass The class where to look for the data provider.</description>
    </item>
    
    <item>
      <title>Mybatis的缓存机制</title>
      <link>https://1019.fun/posts/mybatis%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://1019.fun/posts/mybatis%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>一级缓存（本地缓存） 工作机制  sqlSession级别的缓存，一直开启，无法配置关闭。 与数据库同一次会话期间查询到的数据会放在本地缓存中，以后如果需要获取相同的数据，直接从缓存中读取。  一级缓存失效的几种情况  不同的sqlSession sqlSession相同，查询条件不同 sqlSession相同，查询条件相同，两次之间执行了增删改操作 sqlSession相同，查询条件相同，两次之间手动清除缓存  openSession.clearCache();  二级缓存（全局缓存） 工作机制  namespace级别的缓存 sqlSession被关闭时，一级缓存保存到二级缓存中 不同的namespace查出的缓存数据会放在自己对于的二级缓存中 注意： 默认查询出的结果先放到一级缓存中。只有当sqlSession被关闭的时候，一级缓存才会转移到二级缓存中。  二级缓存的使用  开启全局二级缓存配置(默认开启)  &amp;lt;setting name=&amp;#34;cacheEnabled&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt;  在每个mapper.xml中配置使用二级缓存  &amp;lt;cache&amp;gt;&amp;lt;/cache&amp;gt;  POJO需要实现序列化接口  public class Department implements Serializable { private static final long serialversionUID = 1L; //TODO } mapper.xml中的cache属性 (1)eviction 这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。 可用的清除策略有：
 LRU（默认值） – 最近最少使用：移除最长时间不被使用的对象。 FIFO – 先进先出：按对象进入缓存的顺序来移除它们。 SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。 WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。  (2)flushInterval （刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</description>
    </item>
    
  </channel>
</rss>